# Prep our environment for the test set
# Error check and make sure we have the test set directory ready to go
# Note - Not gauranteed to work on AWS hosts if using volumes - make sure to use ./ansible/ec2_setup.yml to
# setup the volumes under the correct filesystems and mount points!
# Arguments:
# -e test_set_path=/home/dataprep/test_set # The directory where the test set exists on its device
# -e packed_path=/home/dataprep/packed # The directory where the packed test set exists on its device
# -e unpacked_path=/home/dataprep/unpacked # The directory where the unpacked test set exists on its device
# -e test_set_count=1 # The number of tests to run
# -e test_set_size=1 # The size of the test set in GB

- become: yes
  hosts: all
  name: Prep our Test Set directory
  tasks:
    # Check if all the paths are exist on the host
    - name: Check if the test set path exists on the host
      stat:
        path: "{{ test_set_path }}"
      register: test_set_path_exists
      ignore_errors: yes
      when: test_set_path is defined
    - name: Check if the packed path exists on the host
      stat:
        path: "{{ packed_path }}"
      register: packed_path_exists
      ignore_errors: yes
      when: packed_path is defined
    - name: Check if the unpacked path exists on the host
      stat:
        path: "{{ unpacked_path }}"
      register: unpacked_path_exists
      ignore_errors: yes
      when: unpacked_path is defined

    # If the paths don't exist, create them
    - name: Create the test set path
      file:
        path: "{{ test_set_path }}"
        state: directory
        owner: "{{ ansible_user }}"
      ignore_errors: yes
      when: test_set_path_exists is not defined or not test_set_path_exists.stat.exists
    - name: Create the packed path
      file:
        path: "{{ packed_path }}"
        state: directory
        owner: "{{ ansible_user }}"
      ignore_errors: yes
      when: packed_path_exists is not defined or not packed_path_exists.stat.exists
    - name: Create the unpacked path
      file:
        path: "{{ unpacked_path }}"
        state: directory
        owner: "{{ ansible_user }}"
      ignore_errors: yes
      when: unpacked_path_exists is not defined or not unpacked_path_exists.stat.exists

    # Make sure all the paths are empty. Remove any files in them
    - name: Remove any files in the test set path
      shell: "rm -rf {{ test_set_path }}/*"
      when: test_set_path_exists is defined and test_set_path_exists.stat.exists
    - name: Remove any files in the packed path
      shell: "rm -rf {{ packed_path }}/*"
      when: packed_path_exists is defined and packed_path_exists.stat.exists
    - name: Remove any files in the unpacked path
      shell: "rm -rf {{ unpacked_path }}/*"
      when: unpacked_path_exists is defined and unpacked_path_exists.stat.exists

    # Check if we can populate the various paths with the amount of data we need
    # See if the test set directory can hold test_set_size * test_set_count GB
    - name: Check if the test set directory can hold the test set
      shell: df -h {{ test_set_path }} | tail -n 1 | awk '{print $4}' | sed 's/Gi//' | sed 's/G//' | sed 's/Mi/0.001/'
      register: test_set_size_available
      ignore_errors: yes
      when: test_set_path is defined
    - name : Check if the test set directory can hold the test set
      fail:
        msg: "The test set path does not have enough space to hold the test set: {{ test_set_size_available.stdout }} out of {{ test_set_size }} x {{ test_set_count }} = {{ test_set_size | int * test_set_count | int }}"
      when: test_set_size_available is defined and test_set_size_available.stdout is defined and test_set_size_available.stdout | int <  (test_set_size | int * test_set_count | int)
    # See if the packed directory can a single test set
    - name: Check if the packed directory can hold the packed test set
      shell: df -h {{ test_set_path }} | tail -n 1 | awk '{print $4}' | sed 's/Gi//' |  sed 's/G//' | sed 's/Mi/0.001/'
      register: packed_size_available
      ignore_errors: yes
      when: packed_path is defined
    - name : Check if the packed directory can hold the packed test set
      fail:
        msg: "The packed path does not have enough space to hold the packed test set"
      when: packed_size_available is defined and packed_size_available.stdout is defined and packed_size_available.stdout | int < test_set_size | int
    # See if the unpacked directory can hold the unpacked test set
    - name: Check if the unpacked directory can hold the unpacked test set
      shell: df -h {{ test_set_path }} | tail -n 1 | awk '{print $4}' | sed 's/Gi//' | sed 's/G//' | sed 's/Mi/0.001/'
      register: unpacked_size_available
      ignore_errors: yes
      when: unpacked_path is defined
    - name : Check if the unpacked directory can hold the unpacked test set
      fail:
        msg: "The unpacked path does not have enough space to hold the unpacked test set"
      when: unpacked_size_available is defined and unpacked_size_available.stdout is defined and unpacked_size_available.stdout | int < test_set_size | int

    # Populate the test set with our population script
    - name: Populate the test set
      shell:
        cmd: "populate {{ test_set_path }} {{ test_set_count }} {{ test_set_size }}"
      # Note (amiller68): This is important for running on AWS
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
      when: test_set_path is defined