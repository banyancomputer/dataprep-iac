# Run our throughput benchmark on the Dataprep Pipeline

# Usage
# ansible-playbook -i inventory/localhost
# -e bench_path=/home/dataprep/bench
# -e input_path=/home/dataprep/input
# -e packed_path=/home/dataprep/packed
# -e unpacked_path=/home/dataprep/unpacked
# -e manifest_path=/home/dataprep/manifest
# -e result_path=/home/dataprep/result
# -e ifttt_test_webhook_key=YOUR_KEY
# -e file_structures=simpele,wide,...
# -e file_structures_size=1024
# -e file_structures_max_width=2
# -e file_structures_max_depth=2
# -e sample_size=10
# -e sample_time=30
# -e warmup_time=5
# -e do_correctness_check=true
# ./benchmark.yml

- become: yes
  hosts: all
  name: Run our benchmarks
  tasks:
    # SETUP
    # Flag that a benchmark is running
    - name: Flag that a benchmark is running
      file:
        path: "{{ bench_path }}/.benchmark"
        state: touch
    # Get the current time on the host
    - name: Get the current time on the host
      shell: date +%s
      register: start_time
    # Log this time to the control host
    - name: Log this time on the controller
      debug:
        msg: "Throughput Benchmark Start Time: {{ start_time.stdout }}"
    # Make sure a log directory exists in the result path
    - name: Make sure a log directory exists in the result path
      file:
        path: "{{ result_path }}/logs/{{ start_time.stdout }}"
        state: directory
    # Send a notification to IFTTT that Benchmarking has started
    - name: Send a notification to IFTTT that Benchmarking has started
      uri:
        url: "https://maker.ifttt.com/trigger/benchmark-notification/json/with/key/{{ ifttt_test_webhook_key }}"
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{
          \"Title\": \"Benchmarking Started\",
          \"Time\": \"{{ start_time.stdout }}\",
          \"FileStructures\": \"{{ file_structures }}\",
          \"FileStructuresSize\": \"{{ file_structures_size }}\",
          \"FileStructuresMaxWidth\": \"{{ file_structures_max_width }}\",
          \"FileStructuresMaxDepth\": \"{{ file_structures_max_depth }}\",
          \"SampleSize\": \"{{ sample_size }}\",
          \"SampleTime\": \"{{ sample_time }}\",
          \"WarmupTime\": \"{{ warmup_time }}\",
          \"CorrectnessCheck\": \"{{ do_correctness_check }}\",
          \"ProfileTime\": \"{{ profile_time }}\",
        }"
        body_format: json
        status_code: 200
      register: ifttt_notification
      when: ifttt_test_webhook_key is defined

    # THROUGHPUT BENCHMARK
    # Make sure a flag file exists in the bench path
    - name: Make sure a flag file exists in the bench path
      file:
        path: "{{ bench_path }}/.throughput"
        state: touch
    # Run our benchmark, directing output to a log file
    - name: Run our throughput benchmark on the Dataprep Pipeline
      shell: "cargo +nightly criterion --bench pipeline"
      args:
          chdir: "{{ bench_path }}/dataprep"
      environment:
          # Set the PATH to include the cargo bin directory
          PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.cargo/bin"
          # Configure paths for the benchmark
          BENCH_PATH: "{{ bench_path }}"
          INPUT_PATH: "{{ input_path }}"
          PACKED_PATH: "{{ packed_path }}"
          UNPACKED_PATH: "{{ unpacked_path }}"
          # Configure the file structures to test
          BENCH_FILE_STRUCTURES: "{{ file_structures }}"
          BENCH_FILE_STRUCTURES_SIZE: "{{ file_structures_size }}"
          BENCH_FILE_STRUCTURES_MAX_WIDTH: "{{ file_structures_max_width }}"
          BENCH_FILE_STRUCTURES_MAX_DEPTH: "{{ file_structures_max_depth }}"
          # Configure Criterion
          BENCH_SAMPLE_SIZE: "{{ sample_size }}"
          BENCH_SAMPLE_TIME: "{{ sample_time }}"
          BENCH_WARMUP_TIME: "{{ warmup_time }}"
          BENCH_DO_CORRECTNESS_CHECK: "{{ do_correctness_check }}"
      register: run_throughput
      # Make sure we finish the playbook even if the benchmark fails
      ignore_errors: yes
    # Log the output of the benchmark to the log file
    - name: Log the output of the benchmark to the log file
      copy:
          content: "STD_OUT:\n{{ run_throughput.stdout }}\nSTD_ERR:\n{{ run_throughput.stderr }}"
          dest: "{{ result_path }}/logs/{{ start_time.stdout }}/throughput.log"
    # Make sure the flag file is removed
    - name: Make sure the flag file is removed
      file:
        path: "{{ bench_path }}/.throughput"
        state: absent
    - name: Note the current time
      shell: date +%s
      register: current_time
    - name: Send a notification to IFTTT that throughput benchmarking has completed
      uri:
        url: "https://maker.ifttt.com/trigger/benchmark-notification/json/with/key/{{ ifttt_test_webhook_key }}"
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{
          \"Title\": \"Throughput Benchmarking Completed\",
          \"Time\": \"{{ current_time.stdout }}\",
          \"Error\": \"{{ run_throughput is defined and run_throughput.rc != 0 }}\", 
        }"
        body_format: json
        status_code: 200

    # PROFILE BENCHMARK
    # Make sure a flag file exists in the bench path
    - name: Make sure a flag file exists in the bench path
      file:
        path: "{{ bench_path }}/.profile"
        state: touch
      when: profile_time is and profile_time | int != 0
    # Run our benchmark
    - name: Run our profile benchmark on the Dataprep Pipeline
      shell: "cargo +nightly criterion --bench pipeline -- --profile-time={{ profile_time }}"
      args:
        chdir: "{{ bench_path }}/dataprep"
      environment:
        # Set the PATH to include the cargo bin directory
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.cargo/bin"
        # Configure paths for the benchmark
        BENCH_PATH: "{{ bench_path }}"
        INPUT_PATH: "{{ input_path }}"
        PACKED_PATH: "{{ packed_path }}"
        UNPACKED_PATH: "{{ unpacked_path }}"
        # Configure the file structures to test
        BENCH_FILE_STRUCTURES: "{{ file_structures }}"
        BENCH_FILE_STRUCTURES_SIZE: "{{ file_structures_size }}"
        BENCH_FILE_STRUCTURES_MAX_WIDTH: "{{ file_structures_max_width }}"
        BENCH_FILE_STRUCTURES_MAX_DEPTH: "{{ file_structures_max_depth }}"
        # Configure Criterion
        BENCH_SAMPLE_SIZE: "{{ sample_size }}"
        BENCH_SAMPLE_TIME: "{{ sample_time }}"
        BENCH_WARMUP_TIME: "{{ warmup_time }}"
        BENCH_DO_CORRECTNESS_CHECK: "{{ do_correctness_check }}"
      register: run_profile
      # Make sure we finish the playbook even if the benchmark fails
      ignore_errors: yes
      # Run this when profile_time is defined and not 0
      when: profile_time is defined and profile_time | int != 0
    # If we skipped this, set a rc on the register
    - name: Set a rc on the register if we skipped this
      set_fact:
        run_profile:
          rc: 0
      when: profile_time is not defined or profile_time | int == 0
    # Log stdout and stderr to the log file
    - name: Log stdout and stderr to the log file
      copy:
        content: "STD_OUT:\n{{ run_profile.stdout }}\nSTD_ERR:\n{{ run_profile.stderr }}"
        dest: "{{ result_path }}/logs/{{ start_time.stdout }}/profile.log"
      when: profile_time is defined and profile_time | int != 0
    # Make sure the flag file is removed
    - name: Make sure the flag file is removed
      file:
        path: "{{ bench_path }}/.profile"
        state: absent
      when: profile_time is and profile_time | int != 0

    # CLEANUP
    # Send a notification to IFTTT that the benchmarking has completed
    - name: Note the current time
      shell: date +%s
      register: current_time
    - name: Send a notification to IFTTT that the benchmarking has completed
      uri:
        url: "https://maker.ifttt.com/trigger/benchmark-done/json/with/key/{{ ifttt_test_webhook_key }}"
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{
          \"Title\": \"Benchmarking Completed\",
          \"Time\": \"{{ current_time.stdout }}\",
          \"Profile_Skipped\": \"{{ profile_time is not defined or profile_time | int == 0 }}\",
          \"Throughput_Error\": \"{{ run_throughput is defined and run_throughput.rc != 0 }}\", 
          \"Profile_Error\": \"{{ run_profile is defined and run_profile.rc != 0 }}\", 
        }"
        body_format: json
        status_code: 200
      register: ifttt_notification
      when: ifttt_test_webhook_key is defined
    # Remove our Bench Flag
    - name: Remove our Bench Flag
      file:
        path: "{{ bench_path }}/.bench"
        state: absent
