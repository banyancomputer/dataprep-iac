# Benchmark Configuration
# ========================

# User Configuration: used to configure the benchmarking process.

# Target User - who's running commands on the target system
TARGET_USER=my_user
# Root Path: A path where the target user has read/write access
ROOT_PATH=/home/my_user
# Ansible Host Configuration -- should be inventory/localhost for local testing
ANSIBLE_INVENTORY=inventory/localhost
# IFTTT Webhook Key - used to trigger IFTTT events on your account (optional)
IFTTT_TEST_WEBHOOK_KEY=your_ifttt_webhook_key

# Scratch Space Configuration: used to configure the scratch space on the target system.
# NOTE: It's your responsibility to ensure that the scratch space is large enough to hold the files you want to test.
#       Make sure the calling user has read/write access to the scratch space.

# Bench Path: Where to store benchmarking scratch space on target system
BENCH_PATH=$ROOT_PATH/bench
# Test Path: Where to store inputs to bench on target system
INPUT_PATH=$BENCH_PATH/input
# Packed Path: Where to store packed files on target system
PACKED_PATH=$BENCH_PATH/packed
# Unpacked Path: Where to store unpacked files on target system
UNPACKED_PATH=$BENCH_PATH/unpacked
# Manifest Path: Where to store manifest files on target system
MANIFEST_PATH=$BENCH_PATH/manifest
# Results Path: Where to look for Criterion results on target system
RESULT_PATH=$BENCH_PATH/dataprep/target/criterion

# Test Parameters Configuration: used to configure the file structures geneated for the benchmarking process.
# Setting these changes the default values for the benchmarking process. Leave them blank (or commented out)
# to use the default values.
# Note: Remember to configure the scratch space to be large enough to hold the amount of data you want to benchmark.
#       Assuming no expansion during compression:
#       - The input_path should be able to hold the target_size * file_structures.len()
#       - The packed_path should be able to hold the target_size
#       - The unpacked_path should be able to hold the target_size
#       Remember to put thought into your target size and maximum width/depth too!
#       The target size should be able to be split into all the files you want to test, for each file structure.
#       Be sure to look at `get_desired_file_structures()` in dataprep/dataprep-pipelines/benches/pipelines.rs to
#       see how different file structures are generated.

# Whether or not to generate file Structures. Default: 'true'
# If set to false, you are responsible for placing desired datasets in the input_path
GENERATE_FILE_STRUCTURES=true
# What file structures to initialize [simple,skinny,wide,file]. Default: 'simple'
FILE_STRUCTURES=simple
# (Around) How much data to put in each file structure, in bytes. Default:  '1048576' (1 MB)
FILE_STRUCTURES_SIZE=1024
# The Maximum width of each file structure. Default: '4'
FILE_STRUCTURES_MAX_WIDTH=2
# The Maximum depth of each file structure. Default: '4'
FILE_STRUCTURES_MAX_DEPTH=2
# How many Criterion samples to take per file structure. Default: '10'
SAMPLE_SIZE=10
# How long to run each Criterion sample, in seconds. Default: '30'
SAMPLE_TIME=30
# How long to run each Criterion sample before starting to collect data, in seconds. Default: '5'
WARMUP_TIME=5
# Whether or not to check the integrity of the files after packing/unpacking. Default: 'true'
# Will cause the benchmark to fail if the files are not correct.
DO_CORRECTNESS_CHECK=true
# How long to run the profiler, if enabled, in seconds. Default: '0' since Criterion does not profile by default.
# Set to 0 to disable profiling.
# Setting it to a non-zero will cause the benchmark be run twice, but the second with a Flamegraph profiler enabled.
# Note: Profiling will fail if your system does not have `perf` installed (i.e. not Linux)
PROFILE_TIME=0