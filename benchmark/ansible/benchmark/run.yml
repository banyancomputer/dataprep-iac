# Run our throughput benchmark on the Dataprep Pipeline
# Relies on
# - dataprep
# - fake-file
# - flamegraph

# Usage
# ansible-playbook -i inventory/localhost
# -e bench_path=/home/dataprep/bench
# -e input_path=/home/dataprep/input
# -e packed_path=/home/dataprep/packed
# -e unpacked_path=/home/dataprep/unpacked
# -e manifest_path=/home/dataprep/manifest
# -e result_path=/home/dataprep/result
# -e ifttt_test_webhook_key=YOUR_KEY
# ./run.yml

# TODO (amiller68): Change file flags to facts

- hosts: all
  name: Run our benchmarks
  tasks:
    # Error Check ahead of time
    # Check if the benchmark is already running
    - name: Check if the benchmark is already running
      stat:
        path: "{{ bench_path }}/.benchmark"
      register: benchmark_running
    # If the benchmark is already running, exit
    - name: If the benchmark is already running, exit
      fail:
        msg: "Benchmark is already running"
      when: benchmark_running.stat.exists

    # Get version information about the dataprep repo
    - name: Get the commit hash of the latest commit in the dataprep repo
      shell: git rev-parse --short HEAD
      args:
        chdir: "{{ bench_path }}/dataprep"
      register: latest_commit_hash
    - name: Set the latest commit hash
      set_fact:
        dataprep_commit_hash: "{{ latest_commit_hash.stdout }}"
    # Make sure the input path exists and has data in it. Record the contents of the input path
    - name: Make sure the input path exists
      file:
        path: "{{ input_path }}"
        state: directory
    - name: Register the contents of the input path
      shell: ls -1 {{ input_path }}
      register: input_path_contents
    - fail:
        msg: "No files found in {{ input_path }}"
      when: input_path_contents.stdout == ""

    # Success! Flag that a benchmark is now running
    - name: Flag that a benchmark is running
      file:
        path: "{{ bench_path }}/.benchmark"
        state: touch
    - name: Record the input path contents and the commit hash in the flag file
      copy:
        content: "
          Inputs: {{ input_path_contents.stdout }}\n
          Commit: {{ dataprep_commit_hash }}
        "
        dest: "{{ bench_path }}/.benchmark"
        mode: 0644

    - name: Get the current time on the host
      shell: date +%s
      register: start_time
    # Send a notification to IFTTT that Benchmarking has started
    - include_tasks: ../utils/ifttt.yml
      vars:
        ifttt_job: "benchmark-notification"
        ifttt_body: "{
          \"Title\": \"Benchmarking Started\",
          \"Time\": \"{{ start_time.stdout }}\",
          \"Commit\": \"{{ dataprep_commit_hash }}\",
          \"Inputs\": \"{{ input_path_contents.stdout }}\"
        }"
        # These need to be different names
        ifttt_webhook_key: "{{ ifttt_test_webhook_key }}"
      when: ifttt_test_webhook_key is defined and ifttt_test_webhook_key != ""

    # Prep the auxiliary paths
    # Make sure the packed path exists
    - name: Make sure the packed path exists
      file:
        path: "{{ packed_path }}"
        state: directory
    # Make sure the unpacked path exists
    - name: Make sure the unpacked path exists
      file:
        path: "{{ unpacked_path }}"
        state: directory
    # Make sure the manifest path exists
    - name: Make sure the manifest path exists
      file:
        path: "{{ manifest_path }}"
        state: directory
    # Make sure the result path exists
    - name: Make sure the result path exists
      file:
        path: "{{ result_path }}"
        state: directory
    # Make sure a place for results exists in the result path
    - name: Make sure a directory exists in the result path for this run
      file:
        path: "{{ result_path }}/{{ dataprep_commit_hash }}"
        state: directory

    # Run the throughput benchmark over the input space
    # Get the name of every file and directory in the input path
    - name: Determine the inputs to test
      find:
        paths: "{{ input_path }}"
        file_type: any
      register: input_files
    - name: Log to the control host what inputs we are testing
      debug:
        msg: "Testing inputs: {{ input_files.files | map(attribute='path') | list }}"
    # Loop our pipeline tasks over the input files
    - ansible.builtin.include_tasks: bench.yml
      loop: "{{ input_files.files }}"
      loop_control:
        loop_var: input_file
      when: input_files.files | length > 0

    # CLEANUP
    # Send a notification to IFTTT that the benchmarking has completed
    - name: Note the current time
      shell: date +%s
      register: current_time
    - include_tasks: ../utils/ifttt.yml
      vars:
        ifttt_job: "benchmark-notification"
        ifttt_body: "{
          \"Title\": \"Benchmarking Completed\",
          \"Time\": \"{{ current_time.stdout }}\",
          \"Commit\": \"{{ dataprep_commit_hash }}\",
          \"Inputs\": \"{{ input_path_contents.stdout }}\"
        }"
        # These need to be different names
        ifttt_webhook_key: "{{ ifttt_test_webhook_key }}"
      when: ifttt_test_webhook_key is defined and ifttt_test_webhook_key != ""
    - name: Remove our Bench Flag
      file:
        path: "{{ bench_path }}/.benchmark"
        state: absent