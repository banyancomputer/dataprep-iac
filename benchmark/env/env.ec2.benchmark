# Benchmark Configuration
# ========================

# User Configuration: used to configure the benchmarking process.

# Target User - who's running commands on the target system. You shouldn't need to change this.
TARGET_USER=ec2-user
# Root Path: A path where the target user has read/write access. You shouldn't need to change this.
ROOT_PATH=/home/ec2-user
# Ansible Host Configuration -- should be inventory/awshost if using an EC2 instance
ANSIBLE_INVENTORY=inventory/awshost
# IFTTT Webhook Key - used to trigger IFTTT events on your account (optional). Set to blank to disable.
IFTTT_TEST_WEBHOOK_KEY=

# Scratch Space Configuration: used to configure the scratch space on the target system.
# NOTE: It's your responsibility to ensure that the scratch space is large enough to hold the files you want to test.
#       Make sure the calling user has read/write access to the scratch space.
#       Also Note the difference between MOUNT and PATH. The MOUNT is where the volume is mounted on the target system.
#       It's best to have separate volumes for the input, packed, and unpacked data -- to avoid interference between
#       i/o bottlenecks and our throughput measurements.
#       The PATH is where the data is stored on the target system. It's best to have separate paths for the input,
#       packed, and unpacked data

# Bench Path: Where to store benchmarking scratch space on target system
BENCH_PATH=$ROOT_PATH/bench
# Where to Mount the Input Volume on the target system
INPUT_MOUNT=$BENCH_PATH/input
# Test Path: Where to store inputs to bench on target system
INPUT_PATH=$INPUT_MOUNT/data
# Where to Mount the Packed Volume on the target system
PACKED_MOUNT=$BENCH_PATH/packed
# Packed Path: Where to store packed files on target system
PACKED_PATH=$PACKED_MOUNT/data
# Unpacked Mount: Where to Mount the Unpacked Volume on the target system
UNPACKED_MOUNT=$BENCH_PATH/unpacked
# Unpacked Path: Where to store unpacked files on target system
UNPACKED_PATH=$UNPACKED_MOUNT/data
# Manifest Path: Where to store manifest files on target system - this is not on a separate volume
MANIFEST_PATH=$BENCH_PATH/manifest
# Results Path: Where to store and look for results on target system
RESULT_PATH=$BENCH_PATH/results

# Test Parameters Configuration: used to configure the file structures geneated for the benchmarking process.
# These files are generated using the `fake-file` tool
# If you want to use a custom dataset, you can ignore these, but please make sure TF_VAR_INPUT_SIZE_GB and
# TF_VAR_TOTAL_INPUT_SIZE_GB are set correctly for your dataset.
# Note: Remember to configure the scratch space to be large enough to hold the amount of data you want to benchmark.
#       Assuming no expansion during compression:
#       - The input_path should be able to hold the file_structures_size * file_structures.len()
#       - The packed_path should be able to hold the target_size
#       - The unpacked_path should be able to hold the target_size
#       Remember to put thought into your target size and maximum width/depth too!
#       The target size should be able to be split into all the files you want to test, for each file structure.
#       Look to the implementation of fake-file to see how different file structures are generated.

# What file structures to initialize [Simple,Deep,Wide,File,Directory]. This is a comma-separated list.
FILE_STRUCTURES=Simple
# (Around) How much data to put in each file structure, in bytes.
# 1 GB = 1073741824 bytes
# 16 GB = 17179869184 bytes
# 32 GB = 34359738368 bytes
# 64 GB = 68719476736 bytes
FILE_STRUCTURES_SIZE='1073741824'
# The Maximum width of each file structure.
FILE_STRUCTURES_MAX_WIDTH=4
# The Maximum depth of each file structure.
FILE_STRUCTURES_MAX_DEPTH=4

# Ec2 Terraform Configuration: How to setup EBS volumes on the target system.
# NOTE: You need the `TF_VAR_` prefix to set Terraform variables. And you need to export them to make them available

# Volume size configuration - set to track the size of the file structures
# If you use custom datasets or change the file structures between runs, you may need to change these.
# If so you will need to re-deploy the target system with the new values.
# Base size of a file structure in GB. If smaller than 125 GB, will be set to 125 GB by Terraform.
# This is used to determine the size of packed and unpacked volumes -- they should be able to hold a single file structure
export TF_VAR_INPUT_SIZE_GB=$(($FILE_STRUCTURES_SIZE/1024/1024/1024))
# Total size of all file structures in GB. If smaller than 125 GB, will be set to 125 GB by Terraform.
# Multiply the Input size in gb by the number of file structures, which is the number of elements in the comma-separated list

export TF_VAR_TOTAL_INPUT_SIZE_GB=$(($TF_VAR_INPUT_SIZE_GB * $(echo $FILE_STRUCTURES | tr "," "\n" | wc -l)))

# EBS Volume Configuration
# Do not change these unless you know what you are doing
export TF_VAR_INPUT_DEVICE=/dev/sdf
export TF_VAR_PACKED_DEVICE=/dev/sdg
export TF_VAR_UNPACKED_DEVICE=/dev/sdh