# Benchmark Configuration
# ========================

# User Configuration: used to configure the benchmarking process.

# Target User - who's running commands on the target system
TARGET_USER=my_user
# Root Path: A path where the target user has read/write access
ROOT_PATH=/home/my_user
# Ansible Host Configuration -- should be inventory/localhost for local testing
ANSIBLE_INVENTORY=inventory/localhost
# IFTTT Webhook Key - used to trigger IFTTT events on your account (optional). Set to blank to disable.
IFTTT_TEST_WEBHOOK_KEY=

# Scratch Space Configuration: used to configure the scratch space on the target system.
# NOTE: It's your responsibility to ensure that the scratch space is large enough to hold the files you want to test.
#       Make sure the calling user has read/write access to the scratch space.

# Bench Path: Where to store benchmarking scratch space on target system
BENCH_PATH=$ROOT_PATH/bench
# Test Path: Where to store inputs to bench on target system
INPUT_PATH=$BENCH_PATH/input
# Packed Path: Where to store packed files on target system
PACKED_PATH=$BENCH_PATH/packed
# Unpacked Path: Where to store unpacked files on target system
UNPACKED_PATH=$BENCH_PATH/unpacked
# Manifest Path: Where to store manifest files on target system
MANIFEST_PATH=$BENCH_PATH/manifest
# Results Path: Where to store and look for results on target system
RESULT_PATH=$BENCH_PATH/results

# Test Parameters Configuration: used to configure the file structures geneated for the benchmarking process.
# These files are generated using the `fake-file` tool
# If you want to use a custom dataset, you can ignore these, but please make sure TF_VAR_INPUT_SIZE_GB and
# TF_VAR_TOTAL_INPUT_SIZE_GB are set correctly for your dataset.
# Note: Remember to configure the scratch space to be large enough to hold the amount of data you want to benchmark.
#       Assuming no expansion during compression:
#       - The input_path should be able to hold the file_structures_size * file_structures.len()
#       - The packed_path should be able to hold the target_size
#       - The unpacked_path should be able to hold the target_size
#       Remember to put thought into your target size and maximum width/depth too!
#       The target size should be able to be split into all the files you want to test, for each file structure.
#       Look to the implementation of fake-file to see how different file structures are generated.

# What file structures to initialize [Simple,Deep,Wide,File,Directory]. This is a comma-separated list.
FILE_STRUCTURES=Simple
# (Around) How much data to put in each file structure, in bytes.
# 1 GB = 1073741824 bytes
# 16 GB = 17179869184 bytes
# 32 GB = 34359738368 bytes
# 64 GB = 68719476736 bytes
FILE_STRUCTURES_SIZE='1073741824'
# The Maximum width of each file structure.
FILE_STRUCTURES_MAX_WIDTH=4
# The Maximum depth of each file structure.
FILE_STRUCTURES_MAX_DEPTH=4